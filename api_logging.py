# -*- coding: utf-8 -*-
"""API_logging.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tthfqbiTs-TK6xTKCkS6xucf2Kvj0PsQ

# **API Service / Logging**

*   Develop a RESTful API using Flask or FastAPI to serve the model predictions.
*   Implement endpoints for: Health check (/health) & Predicting readmissions (/predict)
*   Ensure the API can handle JSON input and output.
*   Implement logging to capture important events and errors.
*   Ensure logs are written to a file and include timestamps.
"""

# !pip install fastapi uvicorn pyngrok joblib pandas numpy

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# 
# from fastapi import FastAPI, HTTPException
# from pydantic import BaseModel
# import joblib
# import logging
# import pandas as pd
# import numpy as np
# 
# # Set up logging
# logging.basicConfig(
#     filename='app.log',  # Log file
#     level=logging.INFO,  # Log level
#     format='%(asctime)s - %(levelname)s - %(message)s'  # Log format
# )
# 
# # Load the model, one-hot encoder, and scaler
# model = joblib.load("xgb_model.joblib")
# onehot_encoder = joblib.load("onehot_encoder.joblib")
# scaler = joblib.load("scaler.joblib")
# 
# class ReadmissionInput(BaseModel):
#     Age: int
#     Gender: str
#     Admission_Type: str
#     Diagnosis: str
#     Num_Lab_Procedures: int
#     Num_Medications: int
#     Num_Outpatient_Visits: int
#     Num_Inpatient_Visits: int
#     Num_Emergency_Visits: int
#     Num_Diagnoses: int
# 
# app = FastAPI()
# 
# @app.get("/health")
# def health_check():
#     """Health check endpoint."""
#     logging.info("Health check endpoint called.")
#     return {"status": "OK"}
# 
# @app.post("/predict")
# def predict_readmission(input_data: ReadmissionInput):
#     """Predict hospital readmission based on input features."""
#     logging.info("Prediction request received with input: %s", input_data.dict())
# 
#     try:
#         # Convert input data to DataFrame
#         data = pd.DataFrame([input_data.dict()])
# 
#         categorical_cols = ['Gender', 'Admission_Type', 'Diagnosis']
#         numerical_cols = ['Age', 'Num_Lab_Procedures', 'Num_Medications',
#                           'Num_Outpatient_Visits', 'Num_Inpatient_Visits',
#                           'Num_Emergency_Visits', 'Num_Diagnoses']
# 
#         # Preprocessing
#         encoded_features = onehot_encoder.transform(data[categorical_cols])
#         scaled_numerical = scaler.transform(data[numerical_cols])
#         processed_data = pd.DataFrame(
#             data=np.hstack((scaled_numerical, encoded_features)),
#             columns=numerical_cols + list(onehot_encoder.get_feature_names_out(categorical_cols))
#         )
# 
#         # Make predictions
#         prediction = model.predict(processed_data)
#         probability = model.predict_proba(processed_data)[:, 1]
# 
#         logging.info("Prediction successful: %d with probability: %.3f", int(prediction[0]), float(probability[0]))
# 
#         return {
#             "prediction": int(prediction[0]),
#             "probability": float(probability[0])
#         }
#     except Exception as e:
#         logging.error("Error occurred while making prediction: %s", str(e))
#         raise HTTPException(status_code=500, detail="Internal Server Error")
# 
# # Only run the app if the script is called directly
# if __name__ == "__main__":
#     import uvicorn
#     uvicorn.run(app, host="127.0.0.1", port=8080)
#

from pyngrok import ngrok

ngrok.set_auth_token("2nRc8cyZBQoLeTme7zYGSktUfrH_3d3QoHP267PTaECDCzyS9")
public_url = ngrok.connect(8080)
print("Public URL:", public_url)

!ls

!curl -X POST "http://localhost:8080/predict" -H "Content-Type: application/json" -d '{"Age": 50, "Gender": "Male", "Admission_Type": "Emergency", "Diagnosis": "Diabetes", "Num_Lab_Procedures": 5, "Num_Medications": 2, "Num_Outpatient_Visits": 1, "Num_Inpatient_Visits": 0, "Num_Emergency_Visits": 1, "Num_Diagnoses": 2}'

!curl http://localhost:8080/health

