# -*- coding: utf-8 -*-
"""testing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tthfqbiTs-TK6xTKCkS6xucf2Kvj0PsQ

# **Unit and Integration Testing**

*   Write unit tests for individual functions and components.
*   Write integration tests to ensure the entire pipeline works as expected.
*   Use a testing framework like pytest.
"""

# !pip install pytest httpx

from app import app

test_code = """
import os
import sys
import pytest
from fastapi.testclient import TestClient

# Append the directory containing app.py to the Python path
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '.')))

from app import app  # Import the FastAPI app from your application file

client = TestClient(app)

# Sample input data for testing
sample_input = {
    "Age": 50,
    "Gender": "Male",
    "Admission_Type": "Emergency",
    "Diagnosis": "Diabetes",
    "Num_Lab_Procedures": 5,
    "Num_Medications": 2,
    "Num_Outpatient_Visits": 1,
    "Num_Inpatient_Visits": 0,
    "Num_Emergency_Visits": 1,
    "Num_Diagnoses": 2
}

def test_health_check():
    \"\"\"Test the health check endpoint.\"\"\"
    response = client.get("/health")
    assert response.status_code == 200
    assert response.json() == {"status": "OK"}

def test_predict_readmission():
    \"\"\"Test the prediction endpoint with valid input.\"\"\"
    response = client.post("/predict", json=sample_input)
    assert response.status_code == 200
    data = response.json()
    assert "prediction" in data
    assert "probability" in data
    assert isinstance(data["prediction"], int)
    assert isinstance(data["probability"], float)

def test_predict_readmission_invalid_data():
    \"\"\"Test the prediction endpoint with invalid input.\"\"\"
    invalid_input = {**sample_input, "Age": "invalid"}  # Invalid data type
    response = client.post("/predict", json=invalid_input)
    assert response.status_code == 422  # Unprocessable Entity
"""

# Write the test code to a file named 'test_app.py'
with open('test_app.py', 'w') as f:
    f.write(test_code)

print("test_app.py file has been created.")

!pytest test_app.py

# Create and write test cases to a new file called 'test_app.py'
test_app_two = """
import pytest
from fastapi.testclient import TestClient
from app import app, ReadmissionInput
import joblib
import pandas as pd
import numpy as np

# Mocking joblib.load to return a mock model, encoder, and scaler
class MockModel:
    def predict(self, X):
        return np.array([1])  # Mock prediction

    def predict_proba(self, X):
        return np.array([[0.2, 0.8]])  # Mock probabilities

class MockOneHotEncoder:
    def transform(self, X):
        return np.array([[1, 0, 0, 1, 0]])  # Mock encoded features

class MockScaler:
    def transform(self, X):
        return np.array([[0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7]])  # Mock scaled features

# Mock the loading of models
joblib.load = lambda x: MockModel() if 'xgb_model' in x else MockOneHotEncoder() if 'onehot_encoder' in x else MockScaler()

client = TestClient(app)

@pytest.fixture
def valid_input_data():
    return {
        "Age": 70,
        "Gender": "Male",
        "Admission_Type": "Emergency",
        "Diagnosis": "Heart Failure",
        "Num_Lab_Procedures": 5,
        "Num_Medications": 10,
        "Num_Outpatient_Visits": 2,
        "Num_Inpatient_Visits": 1,
        "Num_Emergency_Visits": 3,
        "Num_Diagnoses": 2,
    }

def test_health_check():
    response = client.get("/health")
    assert response.status_code == 200
    assert response.json() == {"status": "OK"}

def test_predict_readmission(valid_input_data):
    response = client.post("/predict", json=valid_input_data)
    assert response.status_code == 200
    assert "prediction" in response.json()
    assert response.json()["prediction"] == 1
    assert response.json()["probability"] == pytest.approx(0.8, rel=1e-2)

def test_predict_readmission_invalid_data():
    invalid_data = {
        "Age": "seventy",  # Invalid data type
        "Gender": "Male",
        "Admission_Type": "Emergency",
        "Diagnosis": "Heart Failure",
        "Num_Lab_Procedures": 5,
        "Num_Medications": 10,
        "Num_Outpatient_Visits": 2,
        "Num_Inpatient_Visits": 1,
        "Num_Emergency_Visits": 3,
        "Num_Diagnoses": 2,
    }
    response = client.post("/predict", json=invalid_data)
    assert response.status_code == 422  # Unprocessable Entity
"""

# Write the test code to a file named 'test_app.py'
with open('test_app_two.py', 'w') as f:
    f.write(test_code)

print("test_app_two.py file has been created.")

!pytest test_app_two.py

